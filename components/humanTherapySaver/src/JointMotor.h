// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `JointMotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __JointMotor_h__
#define __JointMotor_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompJointMotor
{

class JointMotor;
class JointMotorPrx;
class JointMotorPublish;
class JointMotorPublishPrx;

}

namespace RoboCompJointMotor
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    HardwareFailedException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

static HardwareFailedException _iceS_HardwareFailedException_init;

class OutOfRangeException : public ::Ice::UserExceptionHelper<OutOfRangeException, ::Ice::UserException>
{
public:

    virtual ~OutOfRangeException();

    OutOfRangeException(const OutOfRangeException&) = default;

    OutOfRangeException() = default;

    OutOfRangeException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

class UnknownMotorException : public ::Ice::UserExceptionHelper<UnknownMotorException, ::Ice::UserException>
{
public:

    virtual ~UnknownMotorException();

    UnknownMotorException(const UnknownMotorException&) = default;

    UnknownMotorException() = default;

    UnknownMotorException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

class CollisionException : public ::Ice::UserExceptionHelper<CollisionException, ::Ice::UserException>
{
public:

    virtual ~CollisionException();

    CollisionException(const CollisionException&) = default;

    CollisionException() = default;

    CollisionException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

struct MotorState
{
    int p;
    int v;
    int temperature;
    bool isMoving;
    float pos;
    float vel;
    float power;
    ::std::string timeStamp;

    std::tuple<const int&, const int&, const int&, const bool&, const float&, const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(p, v, temperature, isMoving, pos, vel, power, timeStamp);
    }
};

using MotorStateMap = ::std::map<::std::string, ::RoboCompJointMotor::MotorState>;

struct MotorParams
{
    bool invertedSign;
    ::Ice::Byte busId;
    float minPos;
    float maxPos;
    float maxVelocity;
    float zeroPos;
    float stepsRange;
    float maxDegrees;
    float offset;
    float unitsRange;
    ::std::string name;

    std::tuple<const bool&, const ::Ice::Byte&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(invertedSign, busId, minPos, maxPos, maxVelocity, zeroPos, stepsRange, maxDegrees, offset, unitsRange, name);
    }
};

using MotorParamsList = ::std::vector<::RoboCompJointMotor::MotorParams>;

struct BusParams
{
    int numMotors;
    int baudRate;
    int basicPeriod;
    ::std::string handler;
    ::std::string device;

    std::tuple<const int&, const int&, const int&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(numMotors, baudRate, basicPeriod, handler, device);
    }
};

struct MotorGoalPosition
{
    float position;
    float maxSpeed;
    ::std::string name;

    std::tuple<const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(position, maxSpeed, name);
    }
};

using MotorGoalPositionList = ::std::vector<::RoboCompJointMotor::MotorGoalPosition>;

struct MotorGoalVelocity
{
    float velocity;
    float maxAcc;
    ::std::string name;

    std::tuple<const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(velocity, maxAcc, name);
    }
};

using MotorGoalVelocityList = ::std::vector<::RoboCompJointMotor::MotorGoalVelocity>;

using MotorList = ::std::vector<::std::string>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompJointMotor
{

class JointMotor : public virtual ::Ice::Object
{
public:

    using ProxyType = JointMotorPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void setPosition(::RoboCompJointMotor::MotorGoalPosition, const ::Ice::Current&) = 0;
    bool _iceD_setPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVelocity(::RoboCompJointMotor::MotorGoalVelocity, const ::Ice::Current&) = 0;
    bool _iceD_setVelocity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setZeroPos(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_setZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncPosition(::RoboCompJointMotor::MotorGoalPositionList, const ::Ice::Current&) = 0;
    bool _iceD_setSyncPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncVelocity(::RoboCompJointMotor::MotorGoalVelocityList, const ::Ice::Current&) = 0;
    bool _iceD_setSyncVelocity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncZeroPos(const ::Ice::Current&) = 0;
    bool _iceD_setSyncZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorParams getMotorParams(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_getMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorState getMotorState(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_getMotorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorStateMap getMotorStateMap(::RoboCompJointMotor::MotorList, const ::Ice::Current&) = 0;
    bool _iceD_getMotorStateMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Current&) = 0;
    bool _iceD_getAllMotorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Current&) = 0;
    bool _iceD_getAllMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Current&) = 0;
    bool _iceD_getBusParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class JointMotorPublish : public virtual ::Ice::Object
{
public:

    using ProxyType = JointMotorPublishPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void motorStates(::RoboCompJointMotor::MotorStateMap, const ::Ice::Current&) = 0;
    bool _iceD_motorStates(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompJointMotor
{

class JointMotorPrx : public virtual ::Ice::Proxy<JointMotorPrx, ::Ice::ObjectPrx>
{
public:

    void setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setPosition, iceP_goal, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPositionAsync(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setPosition, iceP_goal, context);
    }

    ::std::function<void()>
    setPositionAsync(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setPosition, iceP_goal, context);
    }

    void _iceI_setPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context&);

    void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setVelocity, iceP_goal, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setVelocityAsync(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setVelocity, iceP_goal, context);
    }

    ::std::function<void()>
    setVelocityAsync(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setVelocity, iceP_goal, context);
    }

    void _iceI_setVelocity(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context&);

    void setZeroPos(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setZeroPos, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setZeroPosAsync(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setZeroPos, iceP_name, context);
    }

    ::std::function<void()>
    setZeroPosAsync(const ::std::string& iceP_name,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setZeroPos, iceP_name, context);
    }

    void _iceI_setZeroPos(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);

    void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncPosition, iceP_listGoals, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setSyncPositionAsync(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncPosition, iceP_listGoals, context);
    }

    ::std::function<void()>
    setSyncPositionAsync(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncPosition, iceP_listGoals, context);
    }

    void _iceI_setSyncPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context&);

    void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncVelocity, iceP_listGoals, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setSyncVelocityAsync(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncVelocity, iceP_listGoals, context);
    }

    ::std::function<void()>
    setSyncVelocityAsync(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncVelocity, iceP_listGoals, context);
    }

    void _iceI_setSyncVelocity(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context&);

    void setSyncZeroPos(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncZeroPos, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setSyncZeroPosAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncZeroPos, context);
    }

    ::std::function<void()>
    setSyncZeroPosAsync(::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_setSyncZeroPos, context);
    }

    void _iceI_setSyncZeroPos(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string& iceP_motor, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorParams>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorParams, iceP_motor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMotorParamsAsync(const ::std::string& iceP_motor, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotor::MotorParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorParams, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorParams, iceP_motor, context);
    }

    ::std::function<void()>
    getMotorParamsAsync(const ::std::string& iceP_motor,
                        ::std::function<void(::RoboCompJointMotor::MotorParams)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotor::MotorParams>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorParams, iceP_motor, context);
    }

    void _iceI_getMotorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorParams>>&, const ::std::string&, const ::Ice::Context&);

    ::RoboCompJointMotor::MotorState getMotorState(const ::std::string& iceP_motor, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorState>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorState, iceP_motor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMotorStateAsync(const ::std::string& iceP_motor, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotor::MotorState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorState, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorState, iceP_motor, context);
    }

    ::std::function<void()>
    getMotorStateAsync(const ::std::string& iceP_motor,
                       ::std::function<void(::RoboCompJointMotor::MotorState)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotor::MotorState>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorState, iceP_motor, context);
    }

    void _iceI_getMotorState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorState>>&, const ::std::string&, const ::Ice::Context&);

    ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorStateMap>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorStateMap, iceP_mList, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMotorStateMapAsync(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotor::MotorStateMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorStateMap, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorStateMap, iceP_mList, context);
    }

    ::std::function<void()>
    getMotorStateMapAsync(const ::RoboCompJointMotor::MotorList& iceP_mList,
                          ::std::function<void(::RoboCompJointMotor::MotorStateMap)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotor::MotorStateMap>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getMotorStateMap, iceP_mList, context);
    }

    void _iceI_getMotorStateMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorStateMap>>&, const ::RoboCompJointMotor::MotorList&, const ::Ice::Context&);

    void getAllMotorState(::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_mstateMap = _makePromiseOutgoing<::RoboCompJointMotor::MotorStateMap>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllMotorStateAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotor::MotorStateMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorStateMap, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorState, context);
    }

    ::std::function<void()>
    getAllMotorStateAsync(::std::function<void(::RoboCompJointMotor::MotorStateMap)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotor::MotorStateMap>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorState, context);
    }

    void _iceI_getAllMotorState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorStateMap>>&, const ::Ice::Context&);

    ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorParamsList>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllMotorParamsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotor::MotorParamsList>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::MotorParamsList, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorParams, context);
    }

    ::std::function<void()>
    getAllMotorParamsAsync(::std::function<void(::RoboCompJointMotor::MotorParamsList)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotor::MotorParamsList>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorParams, context);
    }

    void _iceI_getAllMotorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorParamsList>>&, const ::Ice::Context&);

    ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::BusParams>(true, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getBusParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getBusParamsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompJointMotor::BusParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompJointMotor::BusParams, P>(false, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getBusParams, context);
    }

    ::std::function<void()>
    getBusParamsAsync(::std::function<void(::RoboCompJointMotor::BusParams)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompJointMotor::BusParams>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPrx::_iceI_getBusParams, context);
    }

    void _iceI_getBusParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::BusParams>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    JointMotorPrx() = default;
    friend ::std::shared_ptr<JointMotorPrx> IceInternal::createProxy<JointMotorPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class JointMotorPublishPrx : public virtual ::Ice::Proxy<JointMotorPublishPrx, ::Ice::ObjectPrx>
{
public:

    void motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompJointMotor::JointMotorPublishPrx::_iceI_motorStates, iceP_mstateMap, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto motorStatesAsync(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompJointMotor::JointMotorPublishPrx::_iceI_motorStates, iceP_mstateMap, context);
    }

    ::std::function<void()>
    motorStatesAsync(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompJointMotor::JointMotorPublishPrx::_iceI_motorStates, iceP_mstateMap, context);
    }

    void _iceI_motorStates(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorStateMap&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    JointMotorPublishPrx() = default;
    friend ::std::shared_ptr<JointMotorPublishPrx> IceInternal::createProxy<JointMotorPublishPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompJointMotor::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::OutOfRangeException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::OutOfRangeException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::UnknownMotorException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::UnknownMotorException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::CollisionException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::CollisionException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotor::MotorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::MotorState, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorState& v)
    {
        istr->readAll(v.p, v.v, v.temperature, v.isMoving, v.pos, v.vel, v.power, v.timeStamp);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotor::MotorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::MotorParams, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorParams& v)
    {
        istr->readAll(v.invertedSign, v.busId, v.minPos, v.maxPos, v.maxVelocity, v.zeroPos, v.stepsRange, v.maxDegrees, v.offset, v.unitsRange, v.name);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotor::BusParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::BusParams, S>
{
    static void read(S* istr, ::RoboCompJointMotor::BusParams& v)
    {
        istr->readAll(v.numMotors, v.baudRate, v.basicPeriod, v.handler, v.device);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotor::MotorGoalPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::MotorGoalPosition, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorGoalPosition& v)
    {
        istr->readAll(v.position, v.maxSpeed, v.name);
    }
};

template<>
struct StreamableTraits<::RoboCompJointMotor::MotorGoalVelocity>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompJointMotor::MotorGoalVelocity, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorGoalVelocity& v)
    {
        istr->readAll(v.velocity, v.maxAcc, v.name);
    }
};

}

namespace RoboCompJointMotor
{

using JointMotorPtr = ::std::shared_ptr<JointMotor>;
using JointMotorPrxPtr = ::std::shared_ptr<JointMotorPrx>;

using JointMotorPublishPtr = ::std::shared_ptr<JointMotorPublish>;
using JointMotorPublishPrxPtr = ::std::shared_ptr<JointMotorPublishPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompJointMotor
{

class JointMotor;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompJointMotor::JointMotor*);

class JointMotorPublish;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotorPublish>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompJointMotor::JointMotorPublish*);

}

}

namespace RoboCompJointMotor
{

class JointMotor;
::Ice::Object* upCast(::RoboCompJointMotor::JointMotor*);
typedef ::IceInternal::Handle< ::RoboCompJointMotor::JointMotor> JointMotorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor> JointMotorPrx;
typedef JointMotorPrx JointMotorPrxPtr;
void _icePatchObjectPtr(JointMotorPtr&, const ::Ice::ObjectPtr&);

class JointMotorPublish;
::Ice::Object* upCast(::RoboCompJointMotor::JointMotorPublish*);
typedef ::IceInternal::Handle< ::RoboCompJointMotor::JointMotorPublish> JointMotorPublishPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotorPublish> JointMotorPublishPrx;
typedef JointMotorPublishPrx JointMotorPublishPrxPtr;
void _icePatchObjectPtr(JointMotorPublishPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompJointMotor
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_id() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static HardwareFailedException _iceS_HardwareFailedException_init;

class OutOfRangeException : public ::Ice::UserException
{
public:

    OutOfRangeException() {}
    explicit OutOfRangeException(const ::std::string&);
    virtual ~OutOfRangeException() throw();

    virtual ::std::string ice_id() const;
    virtual OutOfRangeException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class UnknownMotorException : public ::Ice::UserException
{
public:

    UnknownMotorException() {}
    explicit UnknownMotorException(const ::std::string&);
    virtual ~UnknownMotorException() throw();

    virtual ::std::string ice_id() const;
    virtual UnknownMotorException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

class CollisionException : public ::Ice::UserException
{
public:

    CollisionException() {}
    explicit CollisionException(const ::std::string&);
    virtual ~CollisionException() throw();

    virtual ::std::string ice_id() const;
    virtual CollisionException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

struct MotorState
{
    ::Ice::Int p;
    ::Ice::Int v;
    ::Ice::Int temperature;
    bool isMoving;
    ::Ice::Float pos;
    ::Ice::Float vel;
    ::Ice::Float power;
    ::std::string timeStamp;

    bool operator==(const MotorState& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(p != rhs_.p)
        {
            return false;
        }
        if(v != rhs_.v)
        {
            return false;
        }
        if(temperature != rhs_.temperature)
        {
            return false;
        }
        if(isMoving != rhs_.isMoving)
        {
            return false;
        }
        if(pos != rhs_.pos)
        {
            return false;
        }
        if(vel != rhs_.vel)
        {
            return false;
        }
        if(power != rhs_.power)
        {
            return false;
        }
        if(timeStamp != rhs_.timeStamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const MotorState& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(p < rhs_.p)
        {
            return true;
        }
        else if(rhs_.p < p)
        {
            return false;
        }
        if(v < rhs_.v)
        {
            return true;
        }
        else if(rhs_.v < v)
        {
            return false;
        }
        if(temperature < rhs_.temperature)
        {
            return true;
        }
        else if(rhs_.temperature < temperature)
        {
            return false;
        }
        if(isMoving < rhs_.isMoving)
        {
            return true;
        }
        else if(rhs_.isMoving < isMoving)
        {
            return false;
        }
        if(pos < rhs_.pos)
        {
            return true;
        }
        else if(rhs_.pos < pos)
        {
            return false;
        }
        if(vel < rhs_.vel)
        {
            return true;
        }
        else if(rhs_.vel < vel)
        {
            return false;
        }
        if(power < rhs_.power)
        {
            return true;
        }
        else if(rhs_.power < power)
        {
            return false;
        }
        if(timeStamp < rhs_.timeStamp)
        {
            return true;
        }
        else if(rhs_.timeStamp < timeStamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const MotorState& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const MotorState& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const MotorState& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const MotorState& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, ::RoboCompJointMotor::MotorState> MotorStateMap;

struct MotorParams
{
    bool invertedSign;
    ::Ice::Byte busId;
    ::Ice::Float minPos;
    ::Ice::Float maxPos;
    ::Ice::Float maxVelocity;
    ::Ice::Float zeroPos;
    ::Ice::Float stepsRange;
    ::Ice::Float maxDegrees;
    ::Ice::Float offset;
    ::Ice::Float unitsRange;
    ::std::string name;

    bool operator==(const MotorParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(invertedSign != rhs_.invertedSign)
        {
            return false;
        }
        if(busId != rhs_.busId)
        {
            return false;
        }
        if(minPos != rhs_.minPos)
        {
            return false;
        }
        if(maxPos != rhs_.maxPos)
        {
            return false;
        }
        if(maxVelocity != rhs_.maxVelocity)
        {
            return false;
        }
        if(zeroPos != rhs_.zeroPos)
        {
            return false;
        }
        if(stepsRange != rhs_.stepsRange)
        {
            return false;
        }
        if(maxDegrees != rhs_.maxDegrees)
        {
            return false;
        }
        if(offset != rhs_.offset)
        {
            return false;
        }
        if(unitsRange != rhs_.unitsRange)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const MotorParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(invertedSign < rhs_.invertedSign)
        {
            return true;
        }
        else if(rhs_.invertedSign < invertedSign)
        {
            return false;
        }
        if(busId < rhs_.busId)
        {
            return true;
        }
        else if(rhs_.busId < busId)
        {
            return false;
        }
        if(minPos < rhs_.minPos)
        {
            return true;
        }
        else if(rhs_.minPos < minPos)
        {
            return false;
        }
        if(maxPos < rhs_.maxPos)
        {
            return true;
        }
        else if(rhs_.maxPos < maxPos)
        {
            return false;
        }
        if(maxVelocity < rhs_.maxVelocity)
        {
            return true;
        }
        else if(rhs_.maxVelocity < maxVelocity)
        {
            return false;
        }
        if(zeroPos < rhs_.zeroPos)
        {
            return true;
        }
        else if(rhs_.zeroPos < zeroPos)
        {
            return false;
        }
        if(stepsRange < rhs_.stepsRange)
        {
            return true;
        }
        else if(rhs_.stepsRange < stepsRange)
        {
            return false;
        }
        if(maxDegrees < rhs_.maxDegrees)
        {
            return true;
        }
        else if(rhs_.maxDegrees < maxDegrees)
        {
            return false;
        }
        if(offset < rhs_.offset)
        {
            return true;
        }
        else if(rhs_.offset < offset)
        {
            return false;
        }
        if(unitsRange < rhs_.unitsRange)
        {
            return true;
        }
        else if(rhs_.unitsRange < unitsRange)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const MotorParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const MotorParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const MotorParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const MotorParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompJointMotor::MotorParams> MotorParamsList;

struct BusParams
{
    ::Ice::Int numMotors;
    ::Ice::Int baudRate;
    ::Ice::Int basicPeriod;
    ::std::string handler;
    ::std::string device;

    bool operator==(const BusParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(numMotors != rhs_.numMotors)
        {
            return false;
        }
        if(baudRate != rhs_.baudRate)
        {
            return false;
        }
        if(basicPeriod != rhs_.basicPeriod)
        {
            return false;
        }
        if(handler != rhs_.handler)
        {
            return false;
        }
        if(device != rhs_.device)
        {
            return false;
        }
        return true;
    }

    bool operator<(const BusParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(numMotors < rhs_.numMotors)
        {
            return true;
        }
        else if(rhs_.numMotors < numMotors)
        {
            return false;
        }
        if(baudRate < rhs_.baudRate)
        {
            return true;
        }
        else if(rhs_.baudRate < baudRate)
        {
            return false;
        }
        if(basicPeriod < rhs_.basicPeriod)
        {
            return true;
        }
        else if(rhs_.basicPeriod < basicPeriod)
        {
            return false;
        }
        if(handler < rhs_.handler)
        {
            return true;
        }
        else if(rhs_.handler < handler)
        {
            return false;
        }
        if(device < rhs_.device)
        {
            return true;
        }
        else if(rhs_.device < device)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const BusParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const BusParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const BusParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const BusParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct MotorGoalPosition
{
    ::Ice::Float position;
    ::Ice::Float maxSpeed;
    ::std::string name;

    bool operator==(const MotorGoalPosition& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(position != rhs_.position)
        {
            return false;
        }
        if(maxSpeed != rhs_.maxSpeed)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const MotorGoalPosition& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(position < rhs_.position)
        {
            return true;
        }
        else if(rhs_.position < position)
        {
            return false;
        }
        if(maxSpeed < rhs_.maxSpeed)
        {
            return true;
        }
        else if(rhs_.maxSpeed < maxSpeed)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const MotorGoalPosition& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const MotorGoalPosition& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const MotorGoalPosition& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const MotorGoalPosition& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompJointMotor::MotorGoalPosition> MotorGoalPositionList;

struct MotorGoalVelocity
{
    ::Ice::Float velocity;
    ::Ice::Float maxAcc;
    ::std::string name;

    bool operator==(const MotorGoalVelocity& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(velocity != rhs_.velocity)
        {
            return false;
        }
        if(maxAcc != rhs_.maxAcc)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const MotorGoalVelocity& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(velocity < rhs_.velocity)
        {
            return true;
        }
        else if(rhs_.velocity < velocity)
        {
            return false;
        }
        if(maxAcc < rhs_.maxAcc)
        {
            return true;
        }
        else if(rhs_.maxAcc < maxAcc)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const MotorGoalVelocity& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const MotorGoalVelocity& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const MotorGoalVelocity& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const MotorGoalVelocity& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompJointMotor::MotorGoalVelocity> MotorGoalVelocityList;

typedef ::std::vector< ::std::string> MotorList;

}

namespace RoboCompJointMotor
{

class Callback_JointMotor_setPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setPosition_Base> Callback_JointMotor_setPositionPtr;

class Callback_JointMotor_setVelocity_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setVelocity_Base> Callback_JointMotor_setVelocityPtr;

class Callback_JointMotor_setZeroPos_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setZeroPos_Base> Callback_JointMotor_setZeroPosPtr;

class Callback_JointMotor_setSyncPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setSyncPosition_Base> Callback_JointMotor_setSyncPositionPtr;

class Callback_JointMotor_setSyncVelocity_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setSyncVelocity_Base> Callback_JointMotor_setSyncVelocityPtr;

class Callback_JointMotor_setSyncZeroPos_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_setSyncZeroPos_Base> Callback_JointMotor_setSyncZeroPosPtr;

class Callback_JointMotor_getMotorParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getMotorParams_Base> Callback_JointMotor_getMotorParamsPtr;

class Callback_JointMotor_getMotorState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getMotorState_Base> Callback_JointMotor_getMotorStatePtr;

class Callback_JointMotor_getMotorStateMap_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getMotorStateMap_Base> Callback_JointMotor_getMotorStateMapPtr;

class Callback_JointMotor_getAllMotorState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getAllMotorState_Base> Callback_JointMotor_getAllMotorStatePtr;

class Callback_JointMotor_getAllMotorParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getAllMotorParams_Base> Callback_JointMotor_getAllMotorParamsPtr;

class Callback_JointMotor_getBusParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotor_getBusParams_Base> Callback_JointMotor_getBusParamsPtr;

class Callback_JointMotorPublish_motorStates_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointMotorPublish_motorStates_Base> Callback_JointMotorPublish_motorStatesPtr;

}

namespace IceProxy
{

namespace RoboCompJointMotor
{

class JointMotor : public virtual ::Ice::Proxy<JointMotor, ::IceProxy::Ice::Object>
{
public:

    void setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPosition(_iceI_begin_setPosition(iceP_goal, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPosition(iceP_goal, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(iceP_goal, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(iceP_goal, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::RoboCompJointMotor::Callback_JointMotor_setPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(iceP_goal, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_setPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPosition(iceP_goal, context, del, cookie);
    }

    void end_setPosition(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setVelocity(_iceI_begin_setVelocity(iceP_goal, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setVelocity(iceP_goal, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(iceP_goal, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(iceP_goal, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::RoboCompJointMotor::Callback_JointMotor_setVelocityPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(iceP_goal, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_setVelocityPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVelocity(iceP_goal, context, del, cookie);
    }

    void end_setVelocity(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setZeroPos(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setZeroPos(_iceI_begin_setZeroPos(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setZeroPos(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& iceP_name, const ::RoboCompJointMotor::Callback_JointMotor_setZeroPosPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setZeroPos(const ::std::string& iceP_name, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_setZeroPosPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setZeroPos(iceP_name, context, del, cookie);
    }

    void end_setZeroPos(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setZeroPos(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setSyncPosition(_iceI_begin_setSyncPosition(iceP_listGoals, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setSyncPosition(iceP_listGoals, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncPosition(iceP_listGoals, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncPosition(iceP_listGoals, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::RoboCompJointMotor::Callback_JointMotor_setSyncPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncPosition(iceP_listGoals, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_setSyncPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncPosition(iceP_listGoals, context, del, cookie);
    }

    void end_setSyncPosition(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setSyncVelocity(_iceI_begin_setSyncVelocity(iceP_listGoals, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setSyncVelocity(iceP_listGoals, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncVelocity(iceP_listGoals, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncVelocity(iceP_listGoals, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::RoboCompJointMotor::Callback_JointMotor_setSyncVelocityPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncVelocity(iceP_listGoals, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_setSyncVelocityPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncVelocity(iceP_listGoals, context, del, cookie);
    }

    void end_setSyncVelocity(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setSyncZeroPos(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setSyncZeroPos(_iceI_begin_setSyncZeroPos(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setSyncZeroPos(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncZeroPos(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncZeroPos(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::RoboCompJointMotor::Callback_JointMotor_setSyncZeroPosPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncZeroPos(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSyncZeroPos(const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_setSyncZeroPosPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSyncZeroPos(context, del, cookie);
    }

    void end_setSyncZeroPos(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setSyncZeroPos(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string& iceP_motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMotorParams(_iceI_begin_getMotorParams(iceP_motor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& iceP_motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMotorParams(iceP_motor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& iceP_motor, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(iceP_motor, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& iceP_motor, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(iceP_motor, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& iceP_motor, const ::RoboCompJointMotor::Callback_JointMotor_getMotorParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(iceP_motor, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorParams(const ::std::string& iceP_motor, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_getMotorParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorParams(iceP_motor, context, del, cookie);
    }

    ::RoboCompJointMotor::MotorParams end_getMotorParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMotorParams(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompJointMotor::MotorState getMotorState(const ::std::string& iceP_motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMotorState(_iceI_begin_getMotorState(iceP_motor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& iceP_motor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMotorState(iceP_motor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& iceP_motor, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(iceP_motor, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& iceP_motor, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(iceP_motor, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& iceP_motor, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(iceP_motor, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorState(const ::std::string& iceP_motor, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorState(iceP_motor, context, del, cookie);
    }

    ::RoboCompJointMotor::MotorState end_getMotorState(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMotorState(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMotorStateMap(_iceI_begin_getMotorStateMap(iceP_mList, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMotorStateMap(iceP_mList, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorStateMap(iceP_mList, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorStateMap(iceP_mList, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStateMapPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorStateMap(iceP_mList, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_getMotorStateMapPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMotorStateMap(iceP_mList, context, del, cookie);
    }

    ::RoboCompJointMotor::MotorStateMap end_getMotorStateMap(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getAllMotorState(::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getAllMotorState(iceP_mstateMap, _iceI_begin_getAllMotorState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllMotorState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorState(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorState(const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorState(context, del, cookie);
    }

    void end_getAllMotorState(::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllMotorState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAllMotorParams(_iceI_begin_getAllMotorParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllMotorParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorParams(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllMotorParams(const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_getAllMotorParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllMotorParams(context, del, cookie);
    }

    ::RoboCompJointMotor::MotorParamsList end_getAllMotorParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllMotorParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getBusParams(_iceI_begin_getBusParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBusParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::RoboCompJointMotor::Callback_JointMotor_getBusParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBusParams(const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotor_getBusParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBusParams(context, del, cookie);
    }

    ::RoboCompJointMotor::BusParams end_getBusParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBusParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class JointMotorPublish : public virtual ::Ice::Proxy<JointMotorPublish, ::IceProxy::Ice::Object>
{
public:

    void motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_motorStates(_iceI_begin_motorStates(iceP_mstateMap, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_motorStates(iceP_mstateMap, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_motorStates(iceP_mstateMap, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_motorStates(iceP_mstateMap, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::RoboCompJointMotor::Callback_JointMotorPublish_motorStatesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_motorStates(iceP_mstateMap, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context, const ::RoboCompJointMotor::Callback_JointMotorPublish_motorStatesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_motorStates(iceP_mstateMap, context, del, cookie);
    }

    void end_motorStates(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_motorStates(const ::RoboCompJointMotor::MotorStateMap&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompJointMotor
{

class JointMotor : public virtual ::Ice::Object
{
public:

    typedef JointMotorPrx ProxyType;
    typedef JointMotorPtr PointerType;

    virtual ~JointMotor();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void setPosition(const ::RoboCompJointMotor::MotorGoalPosition&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setVelocity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setZeroPos(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setSyncPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setSyncVelocity(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSyncZeroPos(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setSyncZeroPos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorParams getMotorParams(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorState getMotorState(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getMotorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorStateMap getMotorStateMap(const ::RoboCompJointMotor::MotorList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getMotorStateMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getAllMotorState(::RoboCompJointMotor::MotorStateMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getAllMotorState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::MotorParamsList getAllMotorParams(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getAllMotorParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompJointMotor::BusParams getBusParams(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getBusParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const JointMotor& lhs, const JointMotor& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const JointMotor& lhs, const JointMotor& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class JointMotorPublish : public virtual ::Ice::Object
{
public:

    typedef JointMotorPublishPrx ProxyType;
    typedef JointMotorPublishPtr PointerType;

    virtual ~JointMotorPublish();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void motorStates(const ::RoboCompJointMotor::MotorStateMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_motorStates(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const JointMotorPublish& lhs, const JointMotorPublish& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const JointMotorPublish& lhs, const JointMotorPublish& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompJointMotor::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::OutOfRangeException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::OutOfRangeException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::OutOfRangeException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::OutOfRangeException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::OutOfRangeException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::UnknownMotorException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::UnknownMotorException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::UnknownMotorException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::UnknownMotorException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::UnknownMotorException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::CollisionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::CollisionException, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::CollisionException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::CollisionException, S>
{
    static void read(S* istr, ::RoboCompJointMotor::CollisionException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::MotorState, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::MotorState& v)
    {
        ostr->write(v.p);
        ostr->write(v.v);
        ostr->write(v.temperature);
        ostr->write(v.isMoving);
        ostr->write(v.pos);
        ostr->write(v.vel);
        ostr->write(v.power);
        ostr->write(v.timeStamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::MotorState, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorState& v)
    {
        istr->read(v.p);
        istr->read(v.v);
        istr->read(v.temperature);
        istr->read(v.isMoving);
        istr->read(v.pos);
        istr->read(v.vel);
        istr->read(v.power);
        istr->read(v.timeStamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 35;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::MotorParams, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::MotorParams& v)
    {
        ostr->write(v.invertedSign);
        ostr->write(v.busId);
        ostr->write(v.minPos);
        ostr->write(v.maxPos);
        ostr->write(v.maxVelocity);
        ostr->write(v.zeroPos);
        ostr->write(v.stepsRange);
        ostr->write(v.maxDegrees);
        ostr->write(v.offset);
        ostr->write(v.unitsRange);
        ostr->write(v.name);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::MotorParams, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorParams& v)
    {
        istr->read(v.invertedSign);
        istr->read(v.busId);
        istr->read(v.minPos);
        istr->read(v.maxPos);
        istr->read(v.maxVelocity);
        istr->read(v.zeroPos);
        istr->read(v.stepsRange);
        istr->read(v.maxDegrees);
        istr->read(v.offset);
        istr->read(v.unitsRange);
        istr->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::BusParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 14;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::BusParams, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::BusParams& v)
    {
        ostr->write(v.numMotors);
        ostr->write(v.baudRate);
        ostr->write(v.basicPeriod);
        ostr->write(v.handler);
        ostr->write(v.device);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::BusParams, S>
{
    static void read(S* istr, ::RoboCompJointMotor::BusParams& v)
    {
        istr->read(v.numMotors);
        istr->read(v.baudRate);
        istr->read(v.basicPeriod);
        istr->read(v.handler);
        istr->read(v.device);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorGoalPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::MotorGoalPosition, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::MotorGoalPosition& v)
    {
        ostr->write(v.position);
        ostr->write(v.maxSpeed);
        ostr->write(v.name);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::MotorGoalPosition, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorGoalPosition& v)
    {
        istr->read(v.position);
        istr->read(v.maxSpeed);
        istr->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompJointMotor::MotorGoalVelocity>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompJointMotor::MotorGoalVelocity, S>
{
    static void write(S* ostr, const ::RoboCompJointMotor::MotorGoalVelocity& v)
    {
        ostr->write(v.velocity);
        ostr->write(v.maxAcc);
        ostr->write(v.name);
    }
};

template<typename S>
struct StreamReader< ::RoboCompJointMotor::MotorGoalVelocity, S>
{
    static void read(S* istr, ::RoboCompJointMotor::MotorGoalVelocity& v)
    {
        istr->read(v.velocity);
        istr->read(v.maxAcc);
        istr->read(v.name);
    }
};

}

namespace RoboCompJointMotor
{

template<class T>
class CallbackNC_JointMotor_setPosition : public Callback_JointMotor_setPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setPosition : public Callback_JointMotor_setPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setPositionPtr
newCallback_JointMotor_setPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setVelocity : public Callback_JointMotor_setVelocity_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setVelocity(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setVelocity<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setVelocity : public Callback_JointMotor_setVelocity_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setVelocity(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setVelocityPtr
newCallback_JointMotor_setVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setZeroPos : public Callback_JointMotor_setZeroPos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setZeroPos(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setZeroPos : public Callback_JointMotor_setZeroPos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setZeroPos(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setZeroPosPtr
newCallback_JointMotor_setZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setSyncPosition : public Callback_JointMotor_setSyncPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setSyncPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSyncPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setSyncPosition : public Callback_JointMotor_setSyncPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setSyncPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSyncPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncPositionPtr
newCallback_JointMotor_setSyncPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setSyncVelocity : public Callback_JointMotor_setSyncVelocity_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setSyncVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSyncVelocity(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncVelocity<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setSyncVelocity : public Callback_JointMotor_setSyncVelocity_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setSyncVelocity(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSyncVelocity(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncVelocityPtr
newCallback_JointMotor_setSyncVelocity(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncVelocity<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_setSyncZeroPos : public Callback_JointMotor_setSyncZeroPos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotor_setSyncZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSyncZeroPos(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_setSyncZeroPos<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_setSyncZeroPos : public Callback_JointMotor_setSyncZeroPos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotor_setSyncZeroPos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSyncZeroPos(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_setSyncZeroPosPtr
newCallback_JointMotor_setSyncZeroPos(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_setSyncZeroPos<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getMotorParams : public Callback_JointMotor_getMotorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParams&);

    CallbackNC_JointMotor_getMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorParams ret;
        try
        {
            ret = proxy->end_getMotorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getMotorParams : public Callback_JointMotor_getMotorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParams&, const CT&);

    Callback_JointMotor_getMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorParams ret;
        try
        {
            ret = proxy->end_getMotorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getMotorParamsPtr
newCallback_JointMotor_getMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getMotorState : public Callback_JointMotor_getMotorState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorState&);

    CallbackNC_JointMotor_getMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorState ret;
        try
        {
            ret = proxy->end_getMotorState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getMotorState : public Callback_JointMotor_getMotorState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorState&, const CT&);

    Callback_JointMotor_getMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorState ret;
        try
        {
            ret = proxy->end_getMotorState(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getMotorStatePtr
newCallback_JointMotor_getMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getMotorStateMap : public Callback_JointMotor_getMotorStateMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&);

    CallbackNC_JointMotor_getMotorStateMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorStateMap ret;
        try
        {
            ret = proxy->end_getMotorStateMap(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorStateMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getMotorStateMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getMotorStateMap : public Callback_JointMotor_getMotorStateMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&, const CT&);

    Callback_JointMotor_getMotorStateMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorStateMap ret;
        try
        {
            ret = proxy->end_getMotorStateMap(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorStateMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getMotorStateMapPtr
newCallback_JointMotor_getMotorStateMap(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getMotorStateMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getAllMotorState : public Callback_JointMotor_getAllMotorState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&);

    CallbackNC_JointMotor_getAllMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorStateMap iceP_mstateMap;
        try
        {
            proxy->end_getAllMotorState(iceP_mstateMap, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_mstateMap);
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getAllMotorState : public Callback_JointMotor_getAllMotorState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorStateMap&, const CT&);

    Callback_JointMotor_getAllMotorState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorStateMap iceP_mstateMap;
        try
        {
            proxy->end_getAllMotorState(iceP_mstateMap, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_mstateMap, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getAllMotorStatePtr
newCallback_JointMotor_getAllMotorState(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorStateMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getAllMotorParams : public Callback_JointMotor_getAllMotorParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParamsList&);

    CallbackNC_JointMotor_getAllMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorParamsList ret;
        try
        {
            ret = proxy->end_getAllMotorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getAllMotorParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getAllMotorParams : public Callback_JointMotor_getAllMotorParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::MotorParamsList&, const CT&);

    Callback_JointMotor_getAllMotorParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::MotorParamsList ret;
        try
        {
            ret = proxy->end_getAllMotorParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getAllMotorParamsPtr
newCallback_JointMotor_getAllMotorParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::MotorParamsList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getAllMotorParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotor_getBusParams : public Callback_JointMotor_getBusParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompJointMotor::BusParams&);

    CallbackNC_JointMotor_getBusParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::BusParams ret;
        try
        {
            ret = proxy->end_getBusParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getBusParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotor_getBusParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotor_getBusParams : public Callback_JointMotor_getBusParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompJointMotor::BusParams&, const CT&);

    Callback_JointMotor_getBusParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompJointMotor::JointMotorPrx proxy = ::RoboCompJointMotor::JointMotorPrx::uncheckedCast(result->getProxy());
        ::RoboCompJointMotor::BusParams ret;
        try
        {
            ret = proxy->end_getBusParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getBusParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotor_getBusParamsPtr
newCallback_JointMotor_getBusParams(T* instance, void (T::*cb)(const ::RoboCompJointMotor::BusParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotor_getBusParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointMotorPublish_motorStates : public Callback_JointMotorPublish_motorStates_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_JointMotorPublish_motorStates(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorPublish_motorStates<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorPublish_motorStates<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorPublish_motorStates<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointMotorPublish_motorStates<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointMotorPublish_motorStates : public Callback_JointMotorPublish_motorStates_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_JointMotorPublish_motorStates(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorPublish_motorStates<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorPublish_motorStates<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorPublish_motorStates<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointMotorPublish_motorStatesPtr
newCallback_JointMotorPublish_motorStates(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointMotorPublish_motorStates<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
