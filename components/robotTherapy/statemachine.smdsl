
/* CHANGE THE NAME OF THE MACHINE IF YOU MAKE
   ANY CHANGE TO THE DEFAULT STATES OR TRANSITIONS */

robotTherapyMachine{
    states waitSession, waitTherapy, waitStartTherapy, loopTherapy, resetTherapy, pauseTherapy, finalizeTherapy;
    initial_state initialize;
    end_state finalizeSession;
    transitions{
        initialize => waitSession;
	waitSession => waitTherapy;
	waitTherapy => waitStartTherapy, finalizeSession;
	waitStarTherapy => loopTherapy;
	loopTherapy => resetTherapy,pauseTherapy,finalizeTherapy;
	resetTherapy => loopTherapy, waitStartTherapy;
	pauseTherapy => loopTherapy, finalizeTherapy;
	finalizeTherapy => waitTherapy; 

    };
};

:loopTherapy parallel{
    states playingVideo, ProcessFrames;
    transition{
	playingVideo => playingVideo;
    };
};

:processFrames{

	states captureFrame, computeMetrics, updateMetrics;
	transitions{
	captureFrame => captureFrame, computeMetrics;
	computeMetrics => updateMetrics;
	updateMetrics => captureFrame;
	};

};



/* --------------------------------------------------------------
   This is the accepted syntax for the State Machine definition 

name_machine{
    [states name_state *[, name_state];]
    [initial_state name_state;]
    [end_state name_state;]
    [transitions{
        name_state => name_state *[, name_state];
        *[name_state => name_state *[, name_state];]
    };]
};

[:parent_state [parallel]{
    states name_state *[, name_state];
    [initial_state name_state;]
    [end_state name_state;]
    [transitions{
        name_state => name_state *[, name_state];
        *[name_state => name_state *[, name_state];]
    };]
};]

------------------------------------------------------------------ */
