// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `JointMotor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <JointMotor.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompJointMotor::HardwareFailedException> iceC_RoboCompJointMotor_HardwareFailedException_init("::RoboCompJointMotor::HardwareFailedException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompJointMotor::OutOfRangeException> iceC_RoboCompJointMotor_OutOfRangeException_init("::RoboCompJointMotor::OutOfRangeException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompJointMotor::UnknownMotorException> iceC_RoboCompJointMotor_UnknownMotorException_init("::RoboCompJointMotor::UnknownMotorException");

const ::IceInternal::DefaultUserExceptionFactoryInit<::RoboCompJointMotor::CollisionException> iceC_RoboCompJointMotor_CollisionException_init("::RoboCompJointMotor::CollisionException");

const ::std::string iceC_RoboCompJointMotor_JointMotor_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotor"
};
const ::std::string iceC_RoboCompJointMotor_JointMotor_ops[] =
{
    "getAllMotorParams",
    "getAllMotorState",
    "getBusParams",
    "getMotorParams",
    "getMotorState",
    "getMotorStateMap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPosition",
    "setSyncPosition",
    "setSyncVelocity",
    "setSyncZeroPos",
    "setVelocity",
    "setZeroPos"
};
const ::std::string iceC_RoboCompJointMotor_JointMotor_setPosition_name = "setPosition";
const ::std::string iceC_RoboCompJointMotor_JointMotor_setVelocity_name = "setVelocity";
const ::std::string iceC_RoboCompJointMotor_JointMotor_setZeroPos_name = "setZeroPos";
const ::std::string iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name = "setSyncPosition";
const ::std::string iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name = "setSyncVelocity";
const ::std::string iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name = "setSyncZeroPos";
const ::std::string iceC_RoboCompJointMotor_JointMotor_getMotorParams_name = "getMotorParams";
const ::std::string iceC_RoboCompJointMotor_JointMotor_getMotorState_name = "getMotorState";
const ::std::string iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name = "getMotorStateMap";
const ::std::string iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name = "getAllMotorState";
const ::std::string iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name = "getAllMotorParams";
const ::std::string iceC_RoboCompJointMotor_JointMotor_getBusParams_name = "getBusParams";

const ::std::string iceC_RoboCompJointMotor_JointMotorPublish_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotorPublish"
};
const ::std::string iceC_RoboCompJointMotor_JointMotorPublish_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "motorStates"
};
const ::std::string iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name = "motorStates";

}

RoboCompJointMotor::HardwareFailedException::~HardwareFailedException()
{
}

const ::std::string&
RoboCompJointMotor::HardwareFailedException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompJointMotor::HardwareFailedException";
    return typeId;
}

RoboCompJointMotor::OutOfRangeException::~OutOfRangeException()
{
}

const ::std::string&
RoboCompJointMotor::OutOfRangeException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompJointMotor::OutOfRangeException";
    return typeId;
}

RoboCompJointMotor::UnknownMotorException::~UnknownMotorException()
{
}

const ::std::string&
RoboCompJointMotor::UnknownMotorException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompJointMotor::UnknownMotorException";
    return typeId;
}

RoboCompJointMotor::CollisionException::~CollisionException()
{
}

const ::std::string&
RoboCompJointMotor::CollisionException::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompJointMotor::CollisionException";
    return typeId;
}

bool
RoboCompJointMotor::JointMotor::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompJointMotor_JointMotor_ids, iceC_RoboCompJointMotor_JointMotor_ids + 2, s);
}

::std::vector<::std::string>
RoboCompJointMotor::JointMotor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompJointMotor_JointMotor_ids[0], &iceC_RoboCompJointMotor_JointMotor_ids[2]);
}

::std::string
RoboCompJointMotor::JointMotor::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompJointMotor::JointMotor";
    return typeId;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPosition iceP_goal;
    istr->readAll(iceP_goal);
    inS.endReadParams();
    this->setPosition(::std::move(iceP_goal), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setVelocity(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocity iceP_goal;
    istr->readAll(iceP_goal);
    inS.endReadParams();
    this->setVelocity(::std::move(iceP_goal), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setZeroPos(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->setZeroPos(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setSyncPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList iceP_listGoals;
    istr->readAll(iceP_listGoals);
    inS.endReadParams();
    this->setSyncPosition(::std::move(iceP_listGoals), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setSyncVelocity(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocityList iceP_listGoals;
    istr->readAll(iceP_listGoals);
    inS.endReadParams();
    this->setSyncVelocity(::std::move(iceP_listGoals), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setSyncZeroPos(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->setSyncZeroPos(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getMotorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_motor;
    istr->readAll(iceP_motor);
    inS.endReadParams();
    ::RoboCompJointMotor::MotorParams ret = this->getMotorParams(::std::move(iceP_motor), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getMotorState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_motor;
    istr->readAll(iceP_motor);
    inS.endReadParams();
    ::RoboCompJointMotor::MotorState ret = this->getMotorState(::std::move(iceP_motor), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getMotorStateMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorList iceP_mList;
    istr->readAll(iceP_mList);
    inS.endReadParams();
    ::RoboCompJointMotor::MotorStateMap ret = this->getMotorStateMap(::std::move(iceP_mList), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getAllMotorState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompJointMotor::MotorStateMap iceP_mstateMap;
    this->getAllMotorState(iceP_mstateMap, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_mstateMap);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getAllMotorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompJointMotor::MotorParamsList ret = this->getAllMotorParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getBusParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompJointMotor::BusParams ret = this->getBusParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompJointMotor_JointMotor_ops, iceC_RoboCompJointMotor_JointMotor_ops + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompJointMotor_JointMotor_ops)
    {
        case 0:
        {
            return _iceD_getAllMotorParams(in, current);
        }
        case 1:
        {
            return _iceD_getAllMotorState(in, current);
        }
        case 2:
        {
            return _iceD_getBusParams(in, current);
        }
        case 3:
        {
            return _iceD_getMotorParams(in, current);
        }
        case 4:
        {
            return _iceD_getMotorState(in, current);
        }
        case 5:
        {
            return _iceD_getMotorStateMap(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_setPosition(in, current);
        }
        case 11:
        {
            return _iceD_setSyncPosition(in, current);
        }
        case 12:
        {
            return _iceD_setSyncVelocity(in, current);
        }
        case 13:
        {
            return _iceD_setSyncZeroPos(in, current);
        }
        case 14:
        {
            return _iceD_setVelocity(in, current);
        }
        case 15:
        {
            return _iceD_setZeroPos(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
RoboCompJointMotor::JointMotorPublish::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompJointMotor_JointMotorPublish_ids, iceC_RoboCompJointMotor_JointMotorPublish_ids + 2, s);
}

::std::vector<::std::string>
RoboCompJointMotor::JointMotorPublish::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompJointMotor_JointMotorPublish_ids[0], &iceC_RoboCompJointMotor_JointMotorPublish_ids[2]);
}

::std::string
RoboCompJointMotor::JointMotorPublish::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompJointMotor::JointMotorPublish::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompJointMotor::JointMotorPublish";
    return typeId;
}

bool
RoboCompJointMotor::JointMotorPublish::_iceD_motorStates(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorStateMap iceP_mstateMap;
    istr->readAll(iceP_mstateMap);
    inS.endReadParams();
    this->motorStates(::std::move(iceP_mstateMap), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotorPublish::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompJointMotor_JointMotorPublish_ops, iceC_RoboCompJointMotor_JointMotorPublish_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompJointMotor_JointMotorPublish_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_motorStates(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_setPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setPosition_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_setPosition_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_goal);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::CollisionException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_setVelocity(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setVelocity_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_setVelocity_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_goal);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_setZeroPos(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setZeroPos_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_setZeroPos_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_setSyncPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_listGoals);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_setSyncVelocity(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_listGoals);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_setSyncZeroPos(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::HardwareFailedException&)
            {
                throw;
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_getMotorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorParams>>& outAsync, const ::std::string& iceP_motor, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getMotorParams_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_getMotorParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_motor);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_getMotorState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorState>>& outAsync, const ::std::string& iceP_motor, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getMotorState_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_getMotorState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_motor);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_getMotorStateMap(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorStateMap>>& outAsync, const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mList);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorStateMap>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::UnknownMotorException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_getAllMotorParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::MotorParamsList>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
RoboCompJointMotor::JointMotorPrx::_iceI_getBusParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompJointMotor::BusParams>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getBusParams_name);
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotor_getBusParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompJointMotor::JointMotorPrx::_newInstance() const
{
    return ::IceInternal::createProxy<JointMotorPrx>();
}

const ::std::string&
RoboCompJointMotor::JointMotorPrx::ice_staticId()
{
    return RoboCompJointMotor::JointMotor::ice_staticId();
}

void
RoboCompJointMotor::JointMotorPublishPrx::_iceI_motorStates(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_mstateMap);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompJointMotor::JointMotorPublishPrx::_newInstance() const
{
    return ::IceInternal::createProxy<JointMotorPublishPrx>();
}

const ::std::string&
RoboCompJointMotor::JointMotorPublishPrx::ice_staticId()
{
    return RoboCompJointMotor::JointMotorPublish::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompJointMotor_JointMotor_setPosition_name = "setPosition";

const ::std::string iceC_RoboCompJointMotor_JointMotor_setVelocity_name = "setVelocity";

const ::std::string iceC_RoboCompJointMotor_JointMotor_setZeroPos_name = "setZeroPos";

const ::std::string iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name = "setSyncPosition";

const ::std::string iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name = "setSyncVelocity";

const ::std::string iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name = "setSyncZeroPos";

const ::std::string iceC_RoboCompJointMotor_JointMotor_getMotorParams_name = "getMotorParams";

const ::std::string iceC_RoboCompJointMotor_JointMotor_getMotorState_name = "getMotorState";

const ::std::string iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name = "getMotorStateMap";

const ::std::string iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name = "getAllMotorState";

const ::std::string iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name = "getAllMotorParams";

const ::std::string iceC_RoboCompJointMotor_JointMotor_getBusParams_name = "getBusParams";

const ::std::string iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name = "motorStates";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::HardwareFailedException> iceC_RoboCompJointMotor_HardwareFailedException_init("::RoboCompJointMotor::HardwareFailedException");

}

RoboCompJointMotor::HardwareFailedException::HardwareFailedException(const ::std::string& iceP_what) :
    ::Ice::UserException(),
    what(iceP_what)
{
}

RoboCompJointMotor::HardwareFailedException::~HardwareFailedException() throw()
{
}

::std::string
RoboCompJointMotor::HardwareFailedException::ice_id() const
{
    return "::RoboCompJointMotor::HardwareFailedException";
}

RoboCompJointMotor::HardwareFailedException*
RoboCompJointMotor::HardwareFailedException::ice_clone() const
{
    return new HardwareFailedException(*this);
}

void
RoboCompJointMotor::HardwareFailedException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::HardwareFailedException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompJointMotor::HardwareFailedException", -1, true);
    Ice::StreamWriter< ::RoboCompJointMotor::HardwareFailedException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompJointMotor::HardwareFailedException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompJointMotor::HardwareFailedException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::OutOfRangeException> iceC_RoboCompJointMotor_OutOfRangeException_init("::RoboCompJointMotor::OutOfRangeException");

}

RoboCompJointMotor::OutOfRangeException::OutOfRangeException(const ::std::string& iceP_what) :
    ::Ice::UserException(),
    what(iceP_what)
{
}

RoboCompJointMotor::OutOfRangeException::~OutOfRangeException() throw()
{
}

::std::string
RoboCompJointMotor::OutOfRangeException::ice_id() const
{
    return "::RoboCompJointMotor::OutOfRangeException";
}

RoboCompJointMotor::OutOfRangeException*
RoboCompJointMotor::OutOfRangeException::ice_clone() const
{
    return new OutOfRangeException(*this);
}

void
RoboCompJointMotor::OutOfRangeException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::OutOfRangeException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompJointMotor::OutOfRangeException", -1, true);
    Ice::StreamWriter< ::RoboCompJointMotor::OutOfRangeException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompJointMotor::OutOfRangeException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompJointMotor::OutOfRangeException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::UnknownMotorException> iceC_RoboCompJointMotor_UnknownMotorException_init("::RoboCompJointMotor::UnknownMotorException");

}

RoboCompJointMotor::UnknownMotorException::UnknownMotorException(const ::std::string& iceP_what) :
    ::Ice::UserException(),
    what(iceP_what)
{
}

RoboCompJointMotor::UnknownMotorException::~UnknownMotorException() throw()
{
}

::std::string
RoboCompJointMotor::UnknownMotorException::ice_id() const
{
    return "::RoboCompJointMotor::UnknownMotorException";
}

RoboCompJointMotor::UnknownMotorException*
RoboCompJointMotor::UnknownMotorException::ice_clone() const
{
    return new UnknownMotorException(*this);
}

void
RoboCompJointMotor::UnknownMotorException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::UnknownMotorException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompJointMotor::UnknownMotorException", -1, true);
    Ice::StreamWriter< ::RoboCompJointMotor::UnknownMotorException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompJointMotor::UnknownMotorException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompJointMotor::UnknownMotorException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::RoboCompJointMotor::CollisionException> iceC_RoboCompJointMotor_CollisionException_init("::RoboCompJointMotor::CollisionException");

}

RoboCompJointMotor::CollisionException::CollisionException(const ::std::string& iceP_what) :
    ::Ice::UserException(),
    what(iceP_what)
{
}

RoboCompJointMotor::CollisionException::~CollisionException() throw()
{
}

::std::string
RoboCompJointMotor::CollisionException::ice_id() const
{
    return "::RoboCompJointMotor::CollisionException";
}

RoboCompJointMotor::CollisionException*
RoboCompJointMotor::CollisionException::ice_clone() const
{
    return new CollisionException(*this);
}

void
RoboCompJointMotor::CollisionException::ice_throw() const
{
    throw *this;
}

void
RoboCompJointMotor::CollisionException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::RoboCompJointMotor::CollisionException", -1, true);
    Ice::StreamWriter< ::RoboCompJointMotor::CollisionException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompJointMotor::CollisionException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompJointMotor::CollisionException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompJointMotor::upCast(::IceProxy::RoboCompJointMotor::JointMotor* p) { return p; }

void
::IceProxy::RoboCompJointMotor::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotor>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompJointMotor::JointMotor;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_setPosition(const ::RoboCompJointMotor::MotorGoalPosition& iceP_goal, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setPosition_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_setPosition_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_setPosition_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_goal);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_setPosition_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setPosition(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_setPosition_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::CollisionException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_setVelocity(const ::RoboCompJointMotor::MotorGoalVelocity& iceP_goal, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setVelocity_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_setVelocity_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_setVelocity_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_goal);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_setVelocity_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setVelocity(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_setVelocity_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_setZeroPos(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setZeroPos_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_setZeroPos_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_setZeroPos_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_setZeroPos_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setZeroPos(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_setZeroPos_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_setSyncPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_listGoals);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncPosition(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_setSyncPosition_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_setSyncVelocity(const ::RoboCompJointMotor::MotorGoalVelocityList& iceP_listGoals, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_listGoals);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncVelocity(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_setSyncVelocity_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_setSyncZeroPos(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_setSyncZeroPos(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_setSyncZeroPos_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::HardwareFailedException&)
        {
            throw;
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_getMotorParams(const ::std::string& iceP_motor, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getMotorParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_getMotorParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_getMotorParams_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_motor);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_getMotorParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompJointMotor::MotorParams
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_getMotorParams_name);
    ::RoboCompJointMotor::MotorParams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_getMotorState(const ::std::string& iceP_motor, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getMotorState_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_getMotorState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_getMotorState_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_motor);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_getMotorState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompJointMotor::MotorState
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorState(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_getMotorState_name);
    ::RoboCompJointMotor::MotorState ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_getMotorStateMap(const ::RoboCompJointMotor::MotorList& iceP_mList, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_mList);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompJointMotor::MotorStateMap
IceProxy::RoboCompJointMotor::JointMotor::end_getMotorStateMap(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_getMotorStateMap_name);
    ::RoboCompJointMotor::MotorStateMap ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_getAllMotorState(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotor::end_getAllMotorState(::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_getAllMotorState_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::UnknownMotorException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_mstateMap);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_getAllMotorParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompJointMotor::MotorParamsList
IceProxy::RoboCompJointMotor::JointMotor::end_getAllMotorParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_getAllMotorParams_name);
    ::RoboCompJointMotor::MotorParamsList ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotor::_iceI_begin_getBusParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompJointMotor_JointMotor_getBusParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotor_getBusParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotor_getBusParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotor_getBusParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompJointMotor::BusParams
IceProxy::RoboCompJointMotor::JointMotor::end_getBusParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompJointMotor_JointMotor_getBusParams_name);
    ::RoboCompJointMotor::BusParams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::RoboCompJointMotor::JointMotor::_newInstance() const
{
    return new JointMotor;
}

const ::std::string&
IceProxy::RoboCompJointMotor::JointMotor::ice_staticId()
{
    return ::RoboCompJointMotor::JointMotor::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompJointMotor::upCast(::IceProxy::RoboCompJointMotor::JointMotorPublish* p) { return p; }

void
::IceProxy::RoboCompJointMotor::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompJointMotor::JointMotorPublish>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompJointMotor::JointMotorPublish;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompJointMotor::JointMotorPublish::_iceI_begin_motorStates(const ::RoboCompJointMotor::MotorStateMap& iceP_mstateMap, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_mstateMap);
        result->endWriteParams();
        result->invoke(iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompJointMotor::JointMotorPublish::end_motorStates(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompJointMotor_JointMotorPublish_motorStates_name);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompJointMotor::JointMotorPublish::_newInstance() const
{
    return new JointMotorPublish;
}

const ::std::string&
IceProxy::RoboCompJointMotor::JointMotorPublish::ice_staticId()
{
    return ::RoboCompJointMotor::JointMotorPublish::ice_staticId();
}

RoboCompJointMotor::JointMotor::~JointMotor()
{
}

::Ice::Object* RoboCompJointMotor::upCast(::RoboCompJointMotor::JointMotor* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompJointMotor_JointMotor_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotor"
};

}

bool
RoboCompJointMotor::JointMotor::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompJointMotor_JointMotor_ids, iceC_RoboCompJointMotor_JointMotor_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompJointMotor::JointMotor::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompJointMotor_JointMotor_ids[0], &iceC_RoboCompJointMotor_JointMotor_ids[2]);
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompJointMotor::JointMotor::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompJointMotor::JointMotor";
    return typeId;
#else
    return iceC_RoboCompJointMotor_JointMotor_ids[1];
#endif
}

bool
RoboCompJointMotor::JointMotor::_iceD_setPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPosition iceP_goal;
    istr->read(iceP_goal);
    inS.endReadParams();
    this->setPosition(iceP_goal, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setVelocity(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocity iceP_goal;
    istr->read(iceP_goal);
    inS.endReadParams();
    this->setVelocity(iceP_goal, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setZeroPos(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->setZeroPos(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setSyncPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList iceP_listGoals;
    istr->read(iceP_listGoals);
    inS.endReadParams();
    this->setSyncPosition(iceP_listGoals, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setSyncVelocity(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalVelocityList iceP_listGoals;
    istr->read(iceP_listGoals);
    inS.endReadParams();
    this->setSyncVelocity(iceP_listGoals, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_setSyncZeroPos(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->setSyncZeroPos(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getMotorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_motor;
    istr->read(iceP_motor);
    inS.endReadParams();
    ::RoboCompJointMotor::MotorParams ret = this->getMotorParams(iceP_motor, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getMotorState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_motor;
    istr->read(iceP_motor);
    inS.endReadParams();
    ::RoboCompJointMotor::MotorState ret = this->getMotorState(iceP_motor, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getMotorStateMap(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorList iceP_mList;
    istr->read(iceP_mList);
    inS.endReadParams();
    ::RoboCompJointMotor::MotorStateMap ret = this->getMotorStateMap(iceP_mList, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getAllMotorState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompJointMotor::MotorStateMap iceP_mstateMap;
    this->getAllMotorState(iceP_mstateMap, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_mstateMap);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getAllMotorParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompJointMotor::MotorParamsList ret = this->getAllMotorParams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompJointMotor::JointMotor::_iceD_getBusParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompJointMotor::BusParams ret = this->getBusParams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompJointMotor_JointMotor_all[] =
{
    "getAllMotorParams",
    "getAllMotorState",
    "getBusParams",
    "getMotorParams",
    "getMotorState",
    "getMotorStateMap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setPosition",
    "setSyncPosition",
    "setSyncVelocity",
    "setSyncZeroPos",
    "setVelocity",
    "setZeroPos"
};

}

bool
RoboCompJointMotor::JointMotor::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompJointMotor_JointMotor_all, iceC_RoboCompJointMotor_JointMotor_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompJointMotor_JointMotor_all)
    {
        case 0:
        {
            return _iceD_getAllMotorParams(in, current);
        }
        case 1:
        {
            return _iceD_getAllMotorState(in, current);
        }
        case 2:
        {
            return _iceD_getBusParams(in, current);
        }
        case 3:
        {
            return _iceD_getMotorParams(in, current);
        }
        case 4:
        {
            return _iceD_getMotorState(in, current);
        }
        case 5:
        {
            return _iceD_getMotorStateMap(in, current);
        }
        case 6:
        {
            return _iceD_ice_id(in, current);
        }
        case 7:
        {
            return _iceD_ice_ids(in, current);
        }
        case 8:
        {
            return _iceD_ice_isA(in, current);
        }
        case 9:
        {
            return _iceD_ice_ping(in, current);
        }
        case 10:
        {
            return _iceD_setPosition(in, current);
        }
        case 11:
        {
            return _iceD_setSyncPosition(in, current);
        }
        case 12:
        {
            return _iceD_setSyncVelocity(in, current);
        }
        case 13:
        {
            return _iceD_setSyncZeroPos(in, current);
        }
        case 14:
        {
            return _iceD_setVelocity(in, current);
        }
        case 15:
        {
            return _iceD_setZeroPos(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompJointMotor::JointMotor::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompJointMotor::JointMotor, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompJointMotor::JointMotor::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompJointMotor::JointMotor, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompJointMotor::_icePatchObjectPtr(JointMotorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompJointMotor::JointMotorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompJointMotor::JointMotor::ice_staticId(), v);
    }
}

RoboCompJointMotor::JointMotorPublish::~JointMotorPublish()
{
}

::Ice::Object* RoboCompJointMotor::upCast(::RoboCompJointMotor::JointMotorPublish* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompJointMotor_JointMotorPublish_ids[2] =
{
    "::Ice::Object",
    "::RoboCompJointMotor::JointMotorPublish"
};

}

bool
RoboCompJointMotor::JointMotorPublish::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompJointMotor_JointMotorPublish_ids, iceC_RoboCompJointMotor_JointMotorPublish_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompJointMotor::JointMotorPublish::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompJointMotor_JointMotorPublish_ids[0], &iceC_RoboCompJointMotor_JointMotorPublish_ids[2]);
}

const ::std::string&
RoboCompJointMotor::JointMotorPublish::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompJointMotor::JointMotorPublish::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompJointMotor::JointMotorPublish";
    return typeId;
#else
    return iceC_RoboCompJointMotor_JointMotorPublish_ids[1];
#endif
}

bool
RoboCompJointMotor::JointMotorPublish::_iceD_motorStates(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorStateMap iceP_mstateMap;
    istr->read(iceP_mstateMap);
    inS.endReadParams();
    this->motorStates(iceP_mstateMap, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompJointMotor_JointMotorPublish_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "motorStates"
};

}

bool
RoboCompJointMotor::JointMotorPublish::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompJointMotor_JointMotorPublish_all, iceC_RoboCompJointMotor_JointMotorPublish_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompJointMotor_JointMotorPublish_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_motorStates(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompJointMotor::JointMotorPublish::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompJointMotor::JointMotorPublish, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompJointMotor::JointMotorPublish::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompJointMotor::JointMotorPublish, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompJointMotor::_icePatchObjectPtr(JointMotorPublishPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompJointMotor::JointMotorPublishPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompJointMotor::JointMotorPublish::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
