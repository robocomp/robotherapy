
/* CHANGE THE NAME OF THE MACHINE IF YOU MAKE
   ANY CHANGE TO THE DEFAULT STATES OR TRANSITIONS */

main_machine{
    initial_state main;
    end_state appEnd;
    transitions{
    main => appEnd;
    };
};

:main{
    states waitSession, initializingSession, waitTherapy,initializingTherapy, loopTherapy, resetTherapy, pauseTherapy, finalizeTherapy,finalizeSession;
    initial_state initialize;
    transitions{
        initialize => waitSession;
	    waitSession => initializingSession;
	    initializingSession => waitTherapy;
	    waitTherapy => initializingTherapy, finalizeSession;
	    initializingTherapy => waitTherapy, loopTherapy;
	    loopTherapy => resetTherapy,pauseTherapy,finalizeTherapy;
	    resetTherapy => waitTherapy;
	    pauseTherapy => loopTherapy, resetTherapy, finalizeTherapy;
	    finalizeTherapy => waitTherapy;
	    finalizeSession => waitSession;

    };
};

:loopTherapy {
	states computeMetrics, updateMetrics;
	initial_state captureFrame;
	transitions{
	captureFrame => captureFrame, computeMetrics;
	computeMetrics => updateMetrics;
	updateMetrics => captureFrame;
	};

};



/* --------------------------------------------------------------
   This is the accepted syntax for the State Machine definition 

name_machine{
    [states name_state *[, name_state];]
    [initial_state name_state;]
    [end_state name_state;]
    [transitions{
        name_state => name_state *[, name_state];
        *[name_state => name_state *[, name_state];]
    };]
};

[:parent_state [parallel]{
    states name_state *[, name_state];
    [initial_state name_state;]
    [end_state name_state;]
    [transitions{
        name_state => name_state *[, name_state];
        *[name_state => name_state *[, name_state];]
    };]
};]

------------------------------------------------------------------ */
